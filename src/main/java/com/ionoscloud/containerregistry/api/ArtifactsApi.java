/*
 * Container Registry service
 * ## Overview Container Registry service enables IONOS clients to manage docker and OCI compliant registries for use by their managed Kubernetes clusters. Use a Container Registry to ensure you have a privately accessed registry to efficiently support image pulls. ## Changelog ### 1.1.0  - Added new endpoints for Repositories  - Added new endpoints for Artifacts  - Added new endpoints for Vulnerabilities  - Added registry vulnerabilityScanning feature 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@cloud.ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.containerregistry.api;

import com.ionoscloud.containerregistry.ApiCallback;
import com.ionoscloud.containerregistry.ApiClient;
import com.ionoscloud.containerregistry.ApiException;
import com.ionoscloud.containerregistry.ApiResponse;
import com.ionoscloud.containerregistry.Configuration;
import com.ionoscloud.containerregistry.Pair;
import com.ionoscloud.containerregistry.ProgressRequestBody;
import com.ionoscloud.containerregistry.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ionoscloud.containerregistry.model.ArtifactRead;
import com.ionoscloud.containerregistry.model.ArtifactReadList;
import com.ionoscloud.containerregistry.model.ArtifactVulnerabilityReadList;
import com.ionoscloud.containerregistry.model.Error;
import com.ionoscloud.containerregistry.model.RegistryArtifactsReadList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactsApi {
    private ApiClient localVarApiClient;

    public ArtifactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtifactsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for registriesArtifactsGet
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterVulnerabilityId Filter resources by vulnerabilityId. (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -pullCount)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesArtifactsGetCall(UUID registryId, Integer offset, Integer limit, String filterVulnerabilityId, String orderBy, final ApiCallback<RegistryArtifactsReadList> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{registryId}/artifacts"
            .replaceAll("\\{" + "registryId" + "\\}", localVarApiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filterVulnerabilityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.vulnerabilityId", filterVulnerabilityId));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registriesArtifactsGetValidateBeforeCall(UUID registryId, Integer offset, Integer limit, String filterVulnerabilityId, String orderBy, final ApiCallback<RegistryArtifactsReadList> _callback) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling registriesArtifactsGet(Async)");
        }
        

        okhttp3.Call localVarCall = registriesArtifactsGetCall(registryId, offset, limit, filterVulnerabilityId, orderBy, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all Artifacts by Registry
     * This endpoint enables retrieving all Artifacts using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterVulnerabilityId Filter resources by vulnerabilityId. (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -pullCount)
     * @return RegistryArtifactsReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public RegistryArtifactsReadList registriesArtifactsGet(UUID registryId, Integer offset, Integer limit, String filterVulnerabilityId, String orderBy) throws ApiException {
        ApiResponse<RegistryArtifactsReadList> localVarResp = registriesArtifactsGetWithHttpInfo(registryId, offset, limit, filterVulnerabilityId, orderBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve all Artifacts by Registry
     * This endpoint enables retrieving all Artifacts using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterVulnerabilityId Filter resources by vulnerabilityId. (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -pullCount)
     * @return ApiResponse&lt;RegistryArtifactsReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegistryArtifactsReadList> registriesArtifactsGetWithHttpInfo(UUID registryId, Integer offset, Integer limit, String filterVulnerabilityId, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = registriesArtifactsGetValidateBeforeCall(registryId, offset, limit, filterVulnerabilityId, orderBy, null);
        Type localVarReturnType = new TypeToken<RegistryArtifactsReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all Artifacts by Registry (asynchronously)
     * This endpoint enables retrieving all Artifacts using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterVulnerabilityId Filter resources by vulnerabilityId. (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -pullCount)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesArtifactsGetAsync(UUID registryId, Integer offset, Integer limit, String filterVulnerabilityId, String orderBy, final ApiCallback<RegistryArtifactsReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = registriesArtifactsGetValidateBeforeCall(registryId, offset, limit, filterVulnerabilityId, orderBy, _callback);
        Type localVarReturnType = new TypeToken<RegistryArtifactsReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registriesRepositoriesArtifactsFindByDigest
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact that should be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Getting Artifact was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ### Not Found The resource that was requested could not be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesRepositoriesArtifactsFindByDigestCall(UUID registryId, String repositoryName, String digest, final ApiCallback<ArtifactRead> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{registryId}/repositories/{repositoryName}/artifacts/{digest}"
            .replaceAll("\\{" + "registryId" + "\\}", localVarApiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "digest" + "\\}", localVarApiClient.escapeString(digest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registriesRepositoriesArtifactsFindByDigestValidateBeforeCall(UUID registryId, String repositoryName, String digest, final ApiCallback<ArtifactRead> _callback) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling registriesRepositoriesArtifactsFindByDigest(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling registriesRepositoriesArtifactsFindByDigest(Async)");
        }
        
        // verify the required parameter 'digest' is set
        if (digest == null) {
            throw new ApiException("Missing the required parameter 'digest' when calling registriesRepositoriesArtifactsFindByDigest(Async)");
        }
        

        okhttp3.Call localVarCall = registriesRepositoriesArtifactsFindByDigestCall(registryId, repositoryName, digest, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Artifact
     * Returns the Artifact by Digest.
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact that should be retrieved. (required)
     * @return ArtifactRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Getting Artifact was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ### Not Found The resource that was requested could not be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactRead registriesRepositoriesArtifactsFindByDigest(UUID registryId, String repositoryName, String digest) throws ApiException {
        ApiResponse<ArtifactRead> localVarResp = registriesRepositoriesArtifactsFindByDigestWithHttpInfo(registryId, repositoryName, digest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Artifact
     * Returns the Artifact by Digest.
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact that should be retrieved. (required)
     * @return ApiResponse&lt;ArtifactRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Getting Artifact was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ### Not Found The resource that was requested could not be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactRead> registriesRepositoriesArtifactsFindByDigestWithHttpInfo(UUID registryId, String repositoryName, String digest) throws ApiException {
        okhttp3.Call localVarCall = registriesRepositoriesArtifactsFindByDigestValidateBeforeCall(registryId, repositoryName, digest, null);
        Type localVarReturnType = new TypeToken<ArtifactRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Artifact (asynchronously)
     * Returns the Artifact by Digest.
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact that should be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Getting Artifact was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ### Not Found The resource that was requested could not be found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesRepositoriesArtifactsFindByDigestAsync(UUID registryId, String repositoryName, String digest, final ApiCallback<ArtifactRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = registriesRepositoriesArtifactsFindByDigestValidateBeforeCall(registryId, repositoryName, digest, _callback);
        Type localVarReturnType = new TypeToken<ArtifactRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registriesRepositoriesArtifactsGet
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -lastPush)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesRepositoriesArtifactsGetCall(UUID registryId, String repositoryName, Integer offset, Integer limit, String orderBy, final ApiCallback<ArtifactReadList> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{registryId}/repositories/{repositoryName}/artifacts"
            .replaceAll("\\{" + "registryId" + "\\}", localVarApiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registriesRepositoriesArtifactsGetValidateBeforeCall(UUID registryId, String repositoryName, Integer offset, Integer limit, String orderBy, final ApiCallback<ArtifactReadList> _callback) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling registriesRepositoriesArtifactsGet(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling registriesRepositoriesArtifactsGet(Async)");
        }
        

        okhttp3.Call localVarCall = registriesRepositoriesArtifactsGetCall(registryId, repositoryName, offset, limit, orderBy, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all Artifacts by Repository
     * This endpoint enables retrieving all Artifacts using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -lastPush)
     * @return ArtifactReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactReadList registriesRepositoriesArtifactsGet(UUID registryId, String repositoryName, Integer offset, Integer limit, String orderBy) throws ApiException {
        ApiResponse<ArtifactReadList> localVarResp = registriesRepositoriesArtifactsGetWithHttpInfo(registryId, repositoryName, offset, limit, orderBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve all Artifacts by Repository
     * This endpoint enables retrieving all Artifacts using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -lastPush)
     * @return ApiResponse&lt;ArtifactReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactReadList> registriesRepositoriesArtifactsGetWithHttpInfo(UUID registryId, String repositoryName, Integer offset, Integer limit, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = registriesRepositoriesArtifactsGetValidateBeforeCall(registryId, repositoryName, offset, limit, orderBy, null);
        Type localVarReturnType = new TypeToken<ArtifactReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all Artifacts by Repository (asynchronously)
     * This endpoint enables retrieving all Artifacts using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -lastPush)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Artifacts successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesRepositoriesArtifactsGetAsync(UUID registryId, String repositoryName, Integer offset, Integer limit, String orderBy, final ApiCallback<ArtifactReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = registriesRepositoriesArtifactsGetValidateBeforeCall(registryId, repositoryName, offset, limit, orderBy, _callback);
        Type localVarReturnType = new TypeToken<ArtifactReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registriesRepositoriesArtifactsVulnerabilitiesGet
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterSeverity Filter resources by vulnerability severity. (optional)
     * @param filterFixable Filter resources by fixable (i.e. remediation action is available) (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -score)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Vulnerabilities successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesRepositoriesArtifactsVulnerabilitiesGetCall(UUID registryId, String repositoryName, String digest, Integer offset, Integer limit, String filterSeverity, Boolean filterFixable, String orderBy, final ApiCallback<ArtifactVulnerabilityReadList> _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registries/{registryId}/repositories/{repositoryName}/artifacts/{digest}/vulnerabilities"
            .replaceAll("\\{" + "registryId" + "\\}", localVarApiClient.escapeString(registryId.toString()))
            .replaceAll("\\{" + "repositoryName" + "\\}", localVarApiClient.escapeString(repositoryName.toString()))
            .replaceAll("\\{" + "digest" + "\\}", localVarApiClient.escapeString(digest.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filterSeverity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.severity", filterSeverity));
        }

        if (filterFixable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.fixable", filterFixable));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registriesRepositoriesArtifactsVulnerabilitiesGetValidateBeforeCall(UUID registryId, String repositoryName, String digest, Integer offset, Integer limit, String filterSeverity, Boolean filterFixable, String orderBy, final ApiCallback<ArtifactVulnerabilityReadList> _callback) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling registriesRepositoriesArtifactsVulnerabilitiesGet(Async)");
        }
        
        // verify the required parameter 'repositoryName' is set
        if (repositoryName == null) {
            throw new ApiException("Missing the required parameter 'repositoryName' when calling registriesRepositoriesArtifactsVulnerabilitiesGet(Async)");
        }
        
        // verify the required parameter 'digest' is set
        if (digest == null) {
            throw new ApiException("Missing the required parameter 'digest' when calling registriesRepositoriesArtifactsVulnerabilitiesGet(Async)");
        }
        

        okhttp3.Call localVarCall = registriesRepositoriesArtifactsVulnerabilitiesGetCall(registryId, repositoryName, digest, offset, limit, filterSeverity, filterFixable, orderBy, _callback);
        return localVarCall;

    }

    /**
     * Retrieve all Vulnerabilities
     * This endpoint enables retrieving all Vulnerabilities using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterSeverity Filter resources by vulnerability severity. (optional)
     * @param filterFixable Filter resources by fixable (i.e. remediation action is available) (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -score)
     * @return ArtifactVulnerabilityReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Vulnerabilities successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactVulnerabilityReadList registriesRepositoriesArtifactsVulnerabilitiesGet(UUID registryId, String repositoryName, String digest, Integer offset, Integer limit, String filterSeverity, Boolean filterFixable, String orderBy) throws ApiException {
        ApiResponse<ArtifactVulnerabilityReadList> localVarResp = registriesRepositoriesArtifactsVulnerabilitiesGetWithHttpInfo(registryId, repositoryName, digest, offset, limit, filterSeverity, filterFixable, orderBy);
        return localVarResp.getData();
    }

    /**
     * Retrieve all Vulnerabilities
     * This endpoint enables retrieving all Vulnerabilities using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterSeverity Filter resources by vulnerability severity. (optional)
     * @param filterFixable Filter resources by fixable (i.e. remediation action is available) (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -score)
     * @return ApiResponse&lt;ArtifactVulnerabilityReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Vulnerabilities successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactVulnerabilityReadList> registriesRepositoriesArtifactsVulnerabilitiesGetWithHttpInfo(UUID registryId, String repositoryName, String digest, Integer offset, Integer limit, String filterSeverity, Boolean filterFixable, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = registriesRepositoriesArtifactsVulnerabilitiesGetValidateBeforeCall(registryId, repositoryName, digest, offset, limit, filterSeverity, filterFixable, orderBy, null);
        Type localVarReturnType = new TypeToken<ArtifactVulnerabilityReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all Vulnerabilities (asynchronously)
     * This endpoint enables retrieving all Vulnerabilities using pagination and optional filters. 
     * @param registryId The ID (UUID) of the Registry. (required)
     * @param repositoryName The Name of the Repository. (required)
     * @param digest The Digest of the Artifact. (required)
     * @param offset The first element (of the total list of elements) to include in the response. Use together with limit for pagination. (optional, default to 0)
     * @param limit The maximum number of elements to return. Use together with offset for pagination. (optional, default to 100)
     * @param filterSeverity Filter resources by vulnerability severity. (optional)
     * @param filterFixable Filter resources by fixable (i.e. remediation action is available) (optional)
     * @param orderBy The field to order the results by. If not provided, the results will be ordered by the default field. (optional, default to -score)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned all requested Vulnerabilities successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ### Bad Request The request send to the API was malformed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ### Unauthorized The request is missing authorization information or the authorization information provided are expired.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ### Internal Server Error An internal error occurred. We apologize for the inconvenience!  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registriesRepositoriesArtifactsVulnerabilitiesGetAsync(UUID registryId, String repositoryName, String digest, Integer offset, Integer limit, String filterSeverity, Boolean filterFixable, String orderBy, final ApiCallback<ArtifactVulnerabilityReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = registriesRepositoriesArtifactsVulnerabilitiesGetValidateBeforeCall(registryId, repositoryName, digest, offset, limit, filterSeverity, filterFixable, orderBy, _callback);
        Type localVarReturnType = new TypeToken<ArtifactVulnerabilityReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
